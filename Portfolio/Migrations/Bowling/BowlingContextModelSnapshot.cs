// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Portfolio.Data;

namespace Portfolio.Migrations.Bowling
{
    [DbContext(typeof(BowlingContext))]
    partial class BowlingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Portfolio.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Portfolio.Models.BowlingFrame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BowlingGameId");

                    b.Property<int>("FrameNumber");

                    b.Property<int>("GameId");

                    b.Property<bool>("IsSplit");

                    b.Property<int>("Roll1Score");

                    b.Property<int>("Roll2Score");

                    b.Property<int>("Roll3Score");

                    b.HasKey("Id");

                    b.HasIndex("BowlingGameId");

                    b.ToTable("Frames");
                });

            modelBuilder.Entity("Portfolio.Models.BowlingGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BowlingSessionId");

                    b.Property<int>("GameNumber");

                    b.Property<int>("SessionId");

                    b.Property<int>("TotalScore");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BowlingSessionId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Portfolio.Models.BowlingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Portfolio.Models.BowlingFrame", b =>
                {
                    b.HasOne("Portfolio.Models.BowlingGame")
                        .WithMany("Frames")
                        .HasForeignKey("BowlingGameId");
                });

            modelBuilder.Entity("Portfolio.Models.BowlingGame", b =>
                {
                    b.HasOne("Portfolio.Models.BowlingSession")
                        .WithMany("Games")
                        .HasForeignKey("BowlingSessionId");

                    b.HasOne("Portfolio.Models.BowlingSession", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Portfolio.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
